Asciidoc Playground
===================
Eduardo de Santana Medeiros Alexadre
v1.0, 2003-12
:doctype: book
:icons:
:lang: pt-BR
:ascii-ids:
:gitrepo: https://github.com/edusantana/playground-asciidoc


== Playground

Testando webhook.


++++
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/charlie-chaplin.jpg" scalefit="1"/>
      </imageobject>
  <caption>
   <para>Designed by Gustave Eiffel in 1889, The Eiffel Tower is one of the
most widely recognized buildings in the world.
</para>
  </caption>
    </mediaobject>
++++

Teste de serviços

Vamos usar este repositório para testar as funcionalidades do asciidoc.


NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

=== Topic

==== Topic X

.Legenda aqui
image::images/chat.png[]

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.

NOTE: Muito texto para preencher as páginas.


[synopsis]
== Será que vai assim mesmo?

Imagem: image:images/resolvido.png[]

Flash has been supplanted by (((HTML5))) HTML5.((("Flash", see="HTML5", sortas="zeus")))


.Codigo fonte http://producao.virtual.ufpb.br/books/edusantana/playground-asciidoc/livro/code/codigo.c[code/codigo.c]

[source,c]
.How to use do-while: link:{gitrepo}/blob/master/livro/code/codigo.c[code/codigo.c]
---------------------------------------------------------------------
include::code/codigo.c[]
---------------------------------------------------------------------




=== Tabela

latexmath:[$(-\infty,-1)$]

[width="70%",cols="^,^,^",frame="topbot",options="header"]
|======================
| Intervalos | Sinal de latexmath:[$f'$] | Cresc. ou Decresc.
| latexmath:[$(-\infty,-1)$] |  latexmath:[$+$] | cresce
| latexmath:[$(-1,1)$] |  latexmath:[$-$] | decresce
| latexmath:[$(1,3)$] |  latexmath:[$-$] | decresce
| latexmath:[$(3,+\infty)$] |  latexmath:[$+$] | cresce
|======================


latexmath:[$ \mathlarger{\int} f $]

Algo mais? 


== Gráfico

[[fig_processo_traducao]]
["graphviz", "esquema-de-traducao.png"]
.Processos de tradução e ligação
----
digraph automata_0 {
  rankdir=LR;
  size ="8.5, 11";
  node [shape = box];
  
  subgraph clusterCodigos {
   label = "Código fonte";
   node [style=filled,color=white];
   style=filled;
   color=lightgrey;
   code_assembly [label="Linguagem de Baixo Nível\n(Linguagem de montagem)"];
   code_c [label="Linguagem de Alto Nível\n(Ex: C, Pascal, ...)"];
  }

  subgraph clusterTradutor {
   label = "Tradutor";
   node [style=filled,color=white,shape="doubleoctagon"];
   style=filled;
   color=lightgrey;
   montador [label="Montador"];
   compilador [label="Compilador"];
  }

  code_gerado [label="Código traduzido\n(Linguagem de montagem)"];

  subgraph clusterCodigoObjeto {
   label = "Código Objeto\n(binário)";
   node [style=filled,color=white];
   style=filled;
   color=lightgrey;
   objeto1 [label="Código Objeto 1"];
   objeto2 [label="Código Objeto 2"];
  }

  ligador [label="Ligador",shape="doubleoctagon"];
  programa [label="Código Binário\nExecutável", shape="component", fillcolor="grey", style="filled"];

  code_assembly -> montador -> objeto1 [color="forestgreen", style="bold"];
  code_c -> compilador -> code_gerado -> montador -> objeto2 [color="blue", style="bold"];

  objeto1->ligador [color="red", style="bold"];
  objeto2->ligador [color="red", style="bold"]; 
  ligador-> programa [color="red", style="bold"];

  {rank=source; code_c code_assembly }
  {rank=same; montador compilador}
  {rank=same; objeto1 objeto2}
  {rank=sink; programa}

}
----


["graphviz", "esquema-de-carregamento.png"]
.Esquema de carregamento
----
digraph automata_0 {
  rankdir=LR;
  size ="8.5, 11";
  node [shape = box];
  
  programa [label="Código Binário\nExecutável", shape="component", fillcolor="grey", style="filled"];
  carregador [label="Carregador",shape="hexagon"];
  memoria  [label="Memória Princial", shape="box3d"];

  programa -> carregador -> memoria;

  {rank=source; programa}
  {rank=sink; memoria}

}
----


["graphviz", "esquema-interpretador.png"]
.Esquema de carregamento
----
digraph automata_0 {
  rankdir=LR;
  size ="8.5, 11";
  node [shape = box];
  label = "Processos de interpretação";
  labelloc = "t"
  
  subgraph clusterCodigos {
   label = "Código fonte";
   node [style=filled,color=white];
   style=filled;
   color=lightgrey;
   code_f [label="Código fonte \n(Ex: Basic, Prolog, Python)"];
   code_i [label="Código fonte \n(Ex: Java)"];
  }

  subgraph clusterTradutor {
   label = "Tradutor";
   node [style=filled,color=white,shape="doubleoctagon"];
   style=filled;
   color=lightgrey;
   compilador [label="Compilador"];
  }

  subgraph clusterInterpretador {
   label = "Interpretador";
   node [style=filled,color=white,shape="doubleoctagon"];
   style=filled;
   color=lightgrey;
   interpretador_f [label="Interpretador"];
   interpretador_i [label="Interpretador"];
  }


  code_gerado [label="Código intermediário"];

  code_f -> interpretador_f [color="forestgreen", style="bold"];
  code_i -> compilador -> code_gerado -> interpretador_i [color="blue", style="bold"];


  {rank=source; code_f code_i }
  {rank=sink; interpretador_f interpretador_i}

}
----


